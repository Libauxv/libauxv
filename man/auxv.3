.\" VIEW THIS MAN PAGE WITH THE COMMAND:
.\" groff -mdoc -Tascii auxv.3
.Dd February 2nd, 2010
.Os Linux
.Dt AUXV \&3 "Library Functions Manual"
.Sh NAME
.Nm prefetch_auxv,
.Nm query_auxv,
.Nm get_auxv
.Nd functions for querying the auxiliary vector
.Sh LIBRARY
.Lb libauxv
.Sh SYNOPSIS
.In auxv/auxv.h
.In auxv/hwcap.h
.Fn "int prefetch_auxv" "void"
.Fn "ElfW(Addr) query_auxv" "int type"
.Fn "ElfW(auxv_t) * get_auxv" "void"
.Sh DESCRIPTION
.Pp
* WARNING: This library is going to be discontinued. Please use glibc's           
getauxval () function for similar functionality instead.
.Pp
.Fn prefetch_auxv
allocates PAGE_SIZE amount of memory on the heap and loads the
.Pa /proc/self/auxv 
into the allocated memory for later use in querying for features.  If
.Pa /proc/self/auxv
is not available it attempts to find the auxv following the process
environment variables.  Calling this function prior to calling 
.Fn query_auxv
allows the allocation to be performed at a predictable point rather than with
lazy allocation at the first query.
.Pp
.Fn query_auxv
scans the heap allocated auxv for the
.Vt auxv_t
struct which has a 
.Va a_type
member variable that matches the 
.Ar type
argument.  If the auxv has not been allocated on the heap then this function
will invoke
.Fn prefetch_auxv
prior to querying.
.Pp
.Fn get_auxv
returns an
.Vt auxv_t *
(pointer) to the heap allocated auxv.
.Pp
NOTE: Memory allocated by this library can not be reclaimed.
.Sh RETURN VALUES
.Fn prefetch_auxv 
returns
.Va 0
on success.  Otherwise it returns non-zero on error from
.Fn pthread_once
and errno is set.
.Pp
.Fn query_auxv 
returns the 
.Va a_val 
member variable of the 
.Vt auxv_t 
struct which had a
.Va a_type 
that matched the 
.Ar type
argument. the value 0 is returned if no 
.Vt auxv_t
struct with an
.Va a_type 
matching the 
.Ar type
argument could be found, or if an error has occured while attempting to read
.Pa /proc/self/auxv.
.Pp
.Fn get_auxv
returns an
.Vt auxv_t *
(pointer) to the first auxv_t in the heap allocated auxv.
.Sh FILES
.Bl -tag -width "/proc/self/auxv" -compact
.Bl -tag -width "elf.h" -compact
.It Sy elf.h
the system header file that contains the AT_* definitions that match the
.Va a_type
parameters expected by the
.Fn query_auxv
function.
.El
.Bl -tag -width "auxv/auxv.h" -compact
.It Sy auxv/auxv.h
the system header file provided by this library which provides additional AT_*
definitions which may not yet be available in elf.h.  This file also defines
the protoypes for
.Fn prefetch_auxv,
.Fn query_auxv,
and
.Fn get_auxv.
.El
.Bl -tag -width "auxv/hwcap.h" -compact
.It Sy auxv/hwcap.h
the system header file that contains the platform specific hardware
capabilities defintions that map to specific bits in the auxiliary vector HWCAP field.
.El
.It Sy /proc/self/auxv
the file that libauxv function scans when attempting to find an
.Vt auxv_t
structure with an 
.Va a_type
member that matches the argument.
.El
.Sh EXAMPLES
.Bd -literal
#include <auxv/auxv.h>
#include <auxv/hwcap.h>
#include <assert.h>
#include <unistd.h>
#include <stdio.h>
#include <errno.h>
#include <link.h>

int main()
{
  ElfW(auxv_t) *at_ptr = NULL;
  unsigned long int hwcap_mask;
  char * platform = NULL;

  if (prefetch_auxv ())
    {
      printf("prefetch_auxv () failed with errno %d.\\n", errno);
      return -1;
    }

  hwcap_mask = (unsigned long int) query_auxv (AT_HWCAP);

  printf("HWCAP=0x%0*lx\\n",2 * (int) sizeof(unsigned long int), hwcap_mask);

#ifdef __powerpc__
  if (hwcap_mask & PPC_FEATURE_64)
      printf("  64-bit\\n");

  if (hwcap_mask & PPC_FEATURE_32)
      printf("  32-bit\\n");
#endif

  platform = (char*) query_auxv (AT_PLATFORM);

  if (platform)
    printf("PLATFORM=%s\\n", platform);
  else
    printf("AT_PLATFORM not supported\\n");

  assert (query_auxv (AT_PAGESZ) == getpagesize ());

  at_ptr = get_auxv ();
  printf("get_auxv() = %p\\n", at_ptr);

  return 0;
}
.Ed
.Sh DEPENDENCIES
Libauxv uses the POSIX function
.Fn pthread_once
in order to enforce threadsafe singleton creation when it reads the platform
auxiliary vector.  Therefore there is a dependency on libpthread.so and the
user application must be linked with -lpthread.
.Sh KNOWN ISSUES
On older systems which don't have /proc/self/auxv support libauxv will scan to
the end of the environment, knowing that the auxv follows it immediately.  It
uses a constructor to capture the location of the original
__environ prior to a potential user
.Fn setenv
call which would effectively move the env such that the auxv no longer
follows it.  This constructor can not operate properly prior to a user
.Fn setenv
call if libauxv is opened via a
.Fn dlopen
call.  So don't use
.Fn setenv
and 
.Fn dlopen
when using libauxv on a system with no /proc/self/auxv.
.Sh RATIONALE
The functionality in Libauxv was originally proposed for inclusion in GLIBC
but was rejected by the maintainer.

The reason this library is necessary is as follows:

1.) GLIBC won't provide access to the 5th process variable, which is the
auxiliary vector (see the link above).

2.) Libraries may need access to the auxv information but only 'main' can find
it.

3.) Libraries may try to find the auxv after the env, but as a library you
can't guarantee that a user application hasn't mangled the environment.

4.) Given that the most reliable method for querying the aux vector is through
/proc/self/auxv a reusable library is useful.

5.) There is an automatic fallback to attempting to read the aux vector from
the env if the /proc/self/auxv isn't supported by the kernel.
.Sh SEE ALSO
.Xr lsauxv 1
.Sh REPORTING BUGS
.Pp
Email bug reports to Tulio Magno Quites Machado Filho <tulioqm@br.ibm.com>.
.Sh AUTHORS
Written by Sean Curry <spcurry5@linux.vnet.ibm.com>, Steven Munroe
<munroesj@us.ibm.com>, and Ryan S. Arnold <rsa@us.ibm.com>.
